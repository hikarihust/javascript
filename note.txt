								Object
- 3 cách thường sử dụng để tạo ra 1 đối tượng
	- Dùng function, nó cũng được coi là 1 đối tượng
	- this + tên của đối tượng
	- Khởi tạo ra 1 đối tượng trực tiếp, ở đây thì do mình tạo 1 đối tượng trực tiếp nên không cần
		phải tạo phần thể hiện của nó.
- Tạo ra các thuộc tính và phương thức cho đối tượng và truy cập vào giá trị của thuộc tính đó
- Phương thức và cách truy cập vào phương thức, cách viết làm sao cho dễ nhìn, dễ thấy có bao nhiêu
	phương thức

- Public và private: 
	Nếu biến hoặc phương thức được đặt ở trạng thái public thì nó sẽ được sử dụng
		ở trong đối tượng đó cũng như là ở trong phần thể hiện của đối tượng đó.
		Còn nếu như phương thức hoặc thuộc tính ở trạng thái private thì nó chỉ được sử dụng ở trong phần
		định nghĩa của đối tượng đó mà thôi, mà không thể sử dụng ở phần thể hiện của đối tượng đó.
	Thuộc tính ở trạng thái private thì mình không thể truy cập trực tiếp được mà phải truy cập thông qua
		một phương thức khác của đối tượng đó

- Truyền đối tượng vào đối tượng
- Truyền giá trị vào phương thức
- Kế thừa: Tạo ra 1 đối tượng con mà nó kế thừa các phương thức và thuộc tính của phương thức cha, lúc này
	đối tượng con được tạo ra nó có thể sử dụng tất các thuộc tính cũng như là phương thức đã được định 
	nghĩa bởi đối tượng cha.
	--> dùng từ khóa call.
- Ôn tập kiến thức về Object trong Javascript
	Tạo ra đối tượng để tạo ra các hình vẽ
	Để vẽ ra được các box thì cần có chiều rộng, chiều cao, màu nền, màu chữ và nội dung văn bản nằm ở trong
	box đó là gì

-----------------------------------------------------------------------------------------------------------

						jQuery - Plugin

Zoom Plugin:
- Học cách sử dụng các phương thức sẵn có của jQuery để viết lên 1 Plugin
- Sau khi nghiên cứu xong các phương thức trong tập hợp các phương thức của jQuery, thì tiếp theo mình sẽ
	nghiên cứu đến jQuery Plugin.
- jQuery Plugin là 1 phương thức để ta sử lý 1 vấn đề nào đó.
	Ví dụ ta có Add() là 1 phương thức của jQuery, thì ở đây Plugin nó cũng có tác dụng giống như phương thức 
	Add(), có nghĩa là ban đầu mình xác định 1 phần tử của jQuery rồi sau đó gọi đến Plugin mà mình sử lý.
- Khi muốn xây dụng 1 ứng dụng nào đó, sử dụng cách viết của jQuery Plugin để cho nó thuận tiện và dễ di chuyển
	Plugin đó qua các ứng dụng khác.
- Thường thì Plugin sẽ được viết trong 1 tập tin js sau đó nhúng tập tin đó vào ứng dụng của mình
- zoom.plugin.js --> nhìn vào tên file mình sẽ biết được đó là 1 tập tin như thế nào(plugin)

- Ứng dụng viết 1 Plugin để phóng to và thu nhỏ.
	- Chúng ta có thể sử dụng 1 phương thức trong phần hiệu ứng để thực hiện điều này đó là animate() nhưng ở đây
		mình sẽ viết thành 1 Plugin để sử dụng, để qua đó hiểu được Plugin trong jQuery là như thế nào
	- (function($){})(jQuery) --> Đây là 1 cú pháp viết 1 Plugin trong jQuery, cú pháp này được jQuery khuyên dùng
		vì nó sẽ hạn chế được phần conflict giữa các framework khác nhau.
	- (function($){
		$.fn.zoomIt = function(options){};
	  })(jQuery);
	  Hàm bên trong chính là mã nguồn của Plugin để chúng ta sử dụng
	  zoomIt: Là tên của Plugin
	-$(document).ready(function(){
		$("#zoomIn").click(function(e) {
	        $("#box").zoomIt({width: 80, height: 70})
					 .removeClass("bg01").addClass("bg02");
	    });
		
		$("#zoomOut").click(function(e) {
	        $("#box").zoomIt({width: 120, height: 130})
					 .removeClass("bg02").addClass("bg01");
	    });
	});
		--> Đôi khi thì không cần phải đưa đoạn mã chạy hàm nào đó vào trong tập tin html mà có thể đưa vào trong tập
			tin js rồi sau đó nhúng vào html --> mã html sẽ dễ nhìn hơn, dễ tìm kiếm hơn
	- extend: options = $.extend(defaults,options)
		Sẽ nhận được giá trị defaults mới và gán giá trị mói đó cho biến options. Đối tượng options sẽ đè lên các 
		giá trị trong đối tượng defaults và sẽ sẽ bổ sung vào các giá trị mà trong đối tượng defaults không có.
	- animate: Dựa vào phương thức này thì mình có thể thay đổi được kích thước
	- return this: Để khi mình viết 1 Plugin, sử dụng nó và ta có thể sử dụng tiếp các phương thức của jQuery cung cấp

----------------------------------

Simple slider plugin:
- Là 1 Slide để cho các ảnh chuyển động
- Để biến div#slide thành 1 phần trình diễn ảnh thì mình sẽ sử dụng 1 Plugin đó là simpleSlide.
- Ở đây thì cách gọi Plugin trong phần Zoom
	$("#box").zoomIt({width: 120, height: 130}) --> Ở phía trước là đối tượng mình tương tác
	$.simpleSlide("#slide",{'itemDefault': 2,'from': 'az','auto': true}) --> Không có đối tượng ở phía trước, đối tượng
		tương tác sẽ nằm ở trong phần tham số
	--> Ta sẽ nghiên cứu thêm 1 cách viết Plugin khác
- setInterval(): Phương thức này có 2 tham số, tham số thứ nhất là 1 function, tham số thứ 2 là time để thực hiện hàm đó
	phương thức setInterval() này được gọi liên tục cho đến khi phương thức clearInterval() được gọi thì dừng lại
- fadeOut(): Ẩn đi đối tượng, có hiệu ứng khác với --------hide()
- fadeIn(): Hiển thị đối tượng, có hiệu ứng khác với -------show()
- eq(): Lấy ra 1 phần tử trong tập hợp với chỉ số index được truyền vào, chỉ số được đánh dấu từ 0
- children(): Lấy ra tập hợp các phần tử con, khác với find() là children() chỉ lấy ở cấp con còn find() thì lấy hết cả 
	các phần tử cháu...
- title: Là thuộc tính mình tự thêm vào
- find(): Tìm trong selector --> tính tất cả các level con, cháu
- text(): Đưa nội dung vào trong thẻ -------------value(), html()
- attr(): Lấy giá trị thuộc tính của thẻ

-----------------------------------------------------------------------------------------------------------

							Xây Dựng Ứng Dụng jQuery

Autocomplete:
----------- Không truyền vào Selector: Ở phần viết Plugin này mình sẽ biết thêm 1 cách viết plugin nữa đó là không cần
	truyền vào đó là selector gì.
- Đây là ứng dụng rất thực tế và thường được sử dụng trong các ứng dụng Web
- Ứng dụng bao gồm ô Textbox thì nó sẽ lấy ra tiêu đề của các cuốn sách nằm ở phía trong của phân Database, ứng với mỗi
	một tiêu đề được hiện ra được gắn vào 1 đường link để khi click vào đó sẽ chuyển đến trang của quyến sách tương ứng
- Khi có 1 danh sách quá dài thì không thể sử dụng SlectBox để liệt kê tất cả những giá trị ở trong đó ra mà nên sử dụng
	AutoComplete để lấy ra được Id của nó
- 2 ứng dụng: link và Id
	Khi không có link thì khi click vào 1 item result thì nó sẽ lấy id và truyền vào ô text box ẩn, và giá trị được click
	sẽ nằm vào trong ô input keywords
- mID: Ô input ẩn, lưu lại ID trong trường hợp cần ID để Submit Form truyền sang 1 trang sử lý nào đó
- div.results: Thẻ để đưa vào kết quả tìm kiếm
- val(): Lấy giá trị trong ô input ---- html(), text()
- Khi ta thực hiện click hoặc focus vào ô tìm kiếm, nếu giá trị trong ô đó là "Enter keyword here..." thì nó sẽ xóa trắng
	đồng thời xóa luôn các thuộc tính mình đã thiết lập style cho "Enter keyword here..."
	--> cần 2 sự kiện cùng 1 lúc đó là focus và click
- Khi đang focus vào trong ô input keyword không có nội dung gì mà click chuột ra ngoài thì ô input đó sẽ lại hiện thị lên 
	câu thông báo vào trong ô input "Enter keyword here..."
	Trong trường hợp trong ô input có dữ liệu mà dời focus ra khỏi ô đó thì vẫn giữ lại dữ liệu đã nhập
- on(): tham số đầu tiên là các sự kiện, gắn vào cùng 1 hàm sử lý cho cùng 1 đối tượng cho các sự kiện khác nhau
- blur(): Dời khỏi ô input keyword, không con focus lên đối tượng nữa, nó cũng có thể xảy khi mà mình nhấn nút Tab
- Hiển thị kết quả, đó là 1 danh sách ---> sử dụng <ul>, <li>
- list-style: none inside ---> Không hiển thị icon của <li>, khoảng cách sẽ được tính từ phía bên trong của <ul>
- Thiết lập cho thẻ div.results có độ dài bằng với ô input ----> dùng jQuery để thực hiện thiết lập kích thước, vị trí
- Kết quả hiện thị là 1 list bao gồm các thẻ <li>, khi mà hơ chuột lên các thẻ <li> đó thì sẽ làm đổi màu background, khi hơ
	lên <li> thì sẽ hiển thị con trỏ chuột
- white-space: Thuộc tính của nhóm text, định dạng cho các khoảng trắng, giá trị nowrap thì xuống dòng được quy về thành 1 
	khoảng trắng bình thường-----> hiển thị dữ liệu mà không bị xuống dòng
- title: Thuộc tính này của phần tử có tác dụng là khi di chuột lên đối tượng đó thì có thể nhìn được phần nội dung gán vào title
- Ajax:
	dataType ---> Kiểu dữ liệu trả về
	data ----> Dữ liệu truyền lên server
	done() Sau khi truyền dữ liệu lên-->thành công-->tiếp theo sẽ thực hiện hành động mong muốn
	LIKE '%{$keyword}%'   ---------   LIMIT {$limit} ------ Cách đặt biến mà không cần dùng dấu "." để nối
- html(): Có thể đưa vào giá trị chuỗi có định dạng html  ---- val(), text()
- $books = array(); --> Cần phải khai báo là 1 mảng rỗng từ ban đầu, để khi không có kết quả tìm kiếm thì vẫn trả dc về bên ajax là
						một đối tượng ajax rỗng và kiểm tra dc length của đối tượng json trả về là 0 
- each(array, callback): Hàm callback sẽ được thực hiện lặp lại từ 0->length-1 lần và thực hiện xét duyệt các giá trị của array
- $(div.result ul li) --> lấy được phần tử li là con của ul, div.result
- toggleClass(): Thực hiện thêm or xóa đi class được truyền vào  --------- tonggle() thực hiện ẩn hiện phần tử
- pTitle, pLink: Cách đặt tên để phân biệt với title và link của các thuộc tính trong html
- attr(): Giúp lấy được các giá trị thuộc tính của phần tử html  ------------------- prop()
- Khi nhấn ra phía ngoài thì box kết quả tìm kiếm phải được ẩn đi, hoặc khi 1 item được chọn thì box result cũng phải được biến mất
	-----> blur(). Nhưng ở đây thì khi click vào 1 đối tượng nào đó thì ô input cũng bị mất focus---> cần dùng dến delay()
- slideUp(): Ẩn đi 1 đối tượng sử dụng hiệu ứng chuyển động sliding 
- results.delay(200).slideUp(300): Đợi sau 200ms thì mới thực hiện slideUp

====================================================== Multi Selectbox ======================================================

Sử lý vấn đề 3 SelectBox liên quan đến nhau:
	SelectBox thứ nhất: Chứa tên các thành phố ở Việt Nam
	SelectBox thứ 2: Chứa các quận huyện của các thành phố mà ta chọn
	SelectBox thứ 3: Các phường, các xã của các quận mà ta chọn
	Sau khi chọn 1 tỉnh bất kỳ ở SelectBox thứ nhất thì trong SelectBox thứ 2 sẽ hiển thị lên hàng loạt các quận huyện của tỉnh đó
		Sau khi nhấn chọn 1 quận bất kỳ ở SelectBox thứ 2 thì trong SelectBox thứ 3 sẽ xuất hiện các phường xã của quận đó
	Cấu trúc Database:
		Bảng cities:
			id: id của các thành phố
			name: Tên của các thành phố
			order: Sắp xếp vị trí của các thành phố
			status: Trạng thái là 1 thì hiển thị thành phố đó, là 0 thì không hiển thị
		Bảng districts:
			cityid: Quận huyện đó thuộc vào thành phố nào(khóa ngoại của bảng districts)
		Bảng ward:
			districtid: Là cột chứa khóa ngoại chứa id của quận mà phường xã này nằm trong đó
	Tạo giao diện cho index và kết nối với cơ sở dữ liệu
	Sau khi kết nối được với mysql thì chọn 1 database nằm trong mysql
	Để người ta không thể xem được cấu trúc thư mục files thì tạo thêm 1 file index.html trong thư mục files

Tạo ra tập tin để lấy ra được dữ liệu ở trong Database location(getdata.php), Đưa dữ liệu vào trong phần tử SelectBox đầu tiên
	Lấy dữ liệu ra và đổ vào trong các SelecBox thì có 2 cách đó là lấy theo kiểu thông thường, hoặc lấy theo kiểu Ajax
	mysqli_query($link, "set names 'utf8'") để có thế lấy ra được dữ liệu ở định dang utf8
	Để truyền được 1 mảng sang cho javascrip thì cần phải dùng json_encode() để chuyển mảng đó thành chuỗi json rồi đưa vào trong
		js rồi sau đó dùng ------------- để chuyển 1 chuỗi json từ PHP để chuyển thành 1 đối tượng trong js
	Lấy theo kiểu thông thường khôn gdungf đến ajax thì đoạn mã js phải nằm trong tập tin php mà không được tách riêng file js
	empty(): Phương thức này sẽ loại bỏ tất cả các phần tử con nằm trong selector đó

Xử lý cho phần Districts:
  Tạo ra 1 mảng dữ liệu có cấu trúc là:
    array(cityid=>array(id, name))
  Khi thay đổi giá trị ở Select Box city thì sẽ load lên giá trị ở phía trong Select Box District

Xử lý cho phần Ward:
  Khi SelecBox quận huyện thay đổi giá trị thì các giá trị mới sẽ được load vào trong SelecBox phường xã

Thực hiện bằng Ajax:
  Đưa phần xử lý js vào trong tập tin cities.js

====================================================== JS Error ======================================================

Xử dụng Throw, Try và Catch để xử lý các vấn đề gây ra lỗi trong lập trình js
Trong lập trình có những ngoại lệ mà chúng ta ít để ý tới:
  Phép chia 2 số a cho b, khi b bằng 0
  Đọc và ghi file nhưng file chưa được tạo hay không có
  Chưa điền dữ liệu vào text box nhưng vẫn đưa ra xử lý
Cú pháp: try - catch
  try {
    Run some code here
  } catch (err) {
    Handle errors here
  }
  Các câu lệnh nằm trong nhóm try sẽ đượ thực hiện, nếu mà nó có lỗi phát sinh thì nó sẽ nhảy sang nhóm catch
Throw: Với việc sử dụng Throw thì có thể tùy biến các thông báo lỗi
  Khi thực hiện các câu lệnh trong Try mà gặp lỗi thì dừng lại và throw ra câu thông báo lỗi

============================================================================================================
                                                    BOM
============================================================================================================
BOM: Browser Object Model
Cho phép Javascript thao tác với trình duyệt
Bao gồm các đối tượng: Window, Screen, Location, History, Navigator, PopupAlert, Timming, Cookies

================================================ JS Window =================================================
Javascript Window Object đại diện cho cửa sổ đang mở trên trình duyệt
Cung cấp các thuộc tính và các phương thức để thao tác các cửa sổ đang làm việc
Các đối tượng con của Javascript Window:
  document: Trả về đối tượng Document của cửa sổ
  history: Trả về đối tượng History của cửa sổ
  location: Trả về đối tượng Location của cửa sổ
  navigator: Trả về đối tượng Navigator của cửa sổ
  screen: Trả về đối tượng Screen của cửa sổ
Các hộp thoại:
  alert: Hiển thị hộp thoại thông báo và nút nhấn OK
    window.alert('This is a text') = alert('This is a text')
  confirm: Hiển thị hộp thoại thông báo xác nhận cùng nút nhấn OK và Cancel
    Nhấn OK trả về true
    Nhấn Cancel trả về false
  prompt: Hiển thị hộp thoại thông báo cho người dùng nhập vào 1 giá trị nào đó, kết quả trả về là giá trị đã nhập
- JavaScript Popup Boxes:
  Người dùng sẽ nhập tên của sinh viên vào rồi nhấn nút Add student
  Khi nhấn nút xong thì sinh viên vừa nhập sẽ được thêm vào phần danh sách, chỉ thực hiện thêm khi đã nhập dữ liệu vào ô input
  Nếu sinh viên không được nhập mà nhấn nút Add student thì sẽ hiển lên câu thông báo là "dữ liệu không được rỗng"
  Khi nhấn nút Add student thì sẽ kết hợp với việc dùng các hộp thoại như:
    alert: Thông báo khi người dùng không nhập dữ liệu
    confirm: Để xác nhận là người dùng có chắc chắn muốn Add student hay không
  Xử lý thêm tình huống là tên của sinh viên không phải thêm từ ô input nữa mà là được thêm từ hộp thoại nào đó

- Đóng, mở cửa sổ:
  open: Mở 1 cửa sổ mới
    window.open(URL, name, specs, replace)
      URL: Địa chỉ của trang muốn mở, nếu không truyền vào thì giá trị mặc định sẽ là about:blank
      name: Chế độ xuất hiện của cửa sổ mới(_blank, _parent, _self, _top) hoặc truyền vào name(thuộc tính name) nào đó
        _blank cũng chính là giá trị mặc định khi không truyền vào
      specs: Thiết lập các thuộc tính của cửa sổ mới muốn mở: width, height, top, left...
        scrollbars=no: Trên trình duyệt Chrome thì thanh scrollbar vẫn xuất hiện nhưng trên IE thì không
      replace: Tham số này ít khi sử dụng
        true: Thay thế tài liệu hiện tại trong lịch sử
        false: Không thay thế tài liệu hiện tại trong danh sách lịch sử mà nó sẽ tạo ra lịch sử mới
  close: Đóng cửa sổ đang mở lại
  closed: Thuộc tính dùng để kiểm tra cửa sổ đã được đóng hay chưa
- Kích thước cửa sổ, Mở cửa sổ đó nằm ở chính giữa trình duyệt
  innerHeight: Thiết lập hoặc trả về chiều cao phần chứa nội dung của một cửa sổ
  innerWidth: Thiết lập hoặc trả về chiều rộng của phần chứa nội dung của cửa sổ
  outerHeight: Thiết lập hoặc trả về chiều cao của cửa sổ(kể cả phần toolbar và scrollbars)
  outerWidth: Thiết lập hoặc trả về chiều rộng của cửa sổ(kể cả phần toolbar và scrollbars)
  Áp dụng các thuộc tính trên để khi mở 1 trình duyệt thì nó luôn nằm chính giữa trình duyệt
- Tọa độ của trình duyệt so với phần màn hình:
  screenLeft: Trả về tọa độ x của cửa sổ so với màn hình(Không hoạt động trên Firefox)
  screenTop: Trả về tọa độ y của cửa sổ so với màn hình(Không hoạt động trên Firefox)
  screenX: Trả về tọa độ x của cửa sổ so với màn hình(Firefox)
  screenY: Trả về tọa độ y của cửa sổ so với màn hình(Firefox)
  Biết cách lấy tọa độ của trình duyệt so với màn hình
  => Căn giữa phần cửa sổ, mặc dù phần trình duyệt có thu hẹp đến mức nào đi chăng nữa
  Khi định dạng theo top và left thì giá trị này được tính là so với màn hình chứ ko phài là so với trình duyệt
- JavaScript Timming: Có thể thiết lập thời gian để gọi 1 số đoạn code nào đó. Điều này còn được gọi là 'Timming events'
  setInterval(): Phương thức này giúp thực hiện 1 mã lệnh sau 1 khoảng thời gian quy định
    Tham số cần tryền vào là code và delay, ở đây code là 1 function thực hiện nhiệm vụ nào đó
  clearInterval(): Khi muốn hủy các hàm được gọi bởi setInterval
  setTimeout(): Thực hiện mã lệnh tại 1 time quy định(ví dụ như là sau khi người dùng vào trình duyệt 5s thì chúng ta sẽ  
    thực hiện 1 nhiệm vụ gì đó)
    Trong 1 số trường hợp có thể sử dụng setTimeout giống như là setInterval
    Muốn thực hiện setTimeout giống như setInterval thì phải dùng đệ quy
  clearTimeout(): Ngừng các mã lệnh được đã được gọi bởi setTimeout()
  Xây dựng chương trình đồng hồ điện tử
    Để hiển thị giá trị thời gian thì dùng đối tượng Date để hiển thị
  Ẩn hiển một bức tranh kết hợp setTimeout() và thuộc tính opacity của CSS
    Khi nhấn Hidden thì giảm dần giá trị opacity để cho nó giảm dần về 0
    Khi nhấn Show thì tăng dần giá trị của opacity từ 0 lên 1
  Xây dựng chương trình đồng hồ bấm giờ
    Ô input hiển thị thời gian
    Khi nhấn nút Start thì thời gian chạy
    Nhấn nút Pause thì dừng lại
    Nhấn nút Reset để quay về trạng thái ban đầu(00:00:00)
    Đồng hồ hiển thị các giá trị là phút:giây:mili giây
      1 phút = 60s
      1s = 100 ms;
    Lúc hiển thị thì kiểm tra xem các giá trị phút, giây, mili giây có mấy chữ số, nếu có 1 thì cho nó hiển thị ở dạng có
      2 chữ số
- Các thuộc tính của JS Window(Tìm hiểu về frames):
  defaultStatus: Thiết lập hoặc trả về giá trị nội dung mặc định trên thanh trạng thái của 1 cửa sổ nào đó(Opera only)
  frames: Trả về 1 mảng các frames trong cửa sổ hiện tại
  length: Trả về số lượng frames trong cửa sổ hiện tại
  name: Thiết lập hoặc trả về giá trị name của 1 cửa sổ nào đó
  status: Thiết lập hoặc trả về giá trị nội dung mặc định trên thanh trạng thái của 1 cửa sổ nào đó(Opera only)
  Thực hành cách thay thế tất cả các phần src bởi iframe bởi 1 iframe nào đó
    Phải lấy được danh sách các frames, duyệt qua danh sách các frames và thay thế src cho nó
- Các phương thức focus và blur
  focus(): Thiết lập cửa sổ ở trạng thái focus(làm nổi bật)
  blur(): Hủy bỏ trạng thái focus của 1 cửa sổ nào đó
  Lần lượt mở các cửa số thứ nhất và thứ 2, khi mở cửa sổ thứ hai thì cửa sổ thứ nhất nó cũng phải hiển thị
- Move: Di chuyển cưa sổ
  moveBy(): Di chuyển cửa sổ đến một tọa độ nào đó so với vị trí hiện tại của cửa sổ
  moveTo(): Di chuyển cửa sổ đến 1 tọa độ nào đó so với màn hình
  Ứng dụng để di chuyển 1 cửa sổ window đến 4 góc của trình duyệt
- Resize: Thay đổi kích thước cửa sổ
  resizeBy(): Thay đổi kích thước cửa sổ theo chiều cao và chiều rộng được truyền vào và nó sẽ thay đổi so với vị trí hiện
    tại của cửa sổ được mở
  resizeTo(): Cũng thay đổi kích thước, tuy nhiên thì nó chỉ thay đổi 1 lần đúng vào giá trị mà mình đã truyền vào
  Ứng dụng: Khi nhấn vào Open Window thì 1 cửa sổ xuất hiện, nhấn vào resizeTo thì cửa sổ này nó sẽ xuất hiện đúng với
    phần chiều rộng và chiều cao của cửa sổ hiện tại và đè lên trên cùng 1 vị trí so vớis cửa sổ hiện tại
- Scroll: Thao tác với thanh trượt của cửa sổ
  scrollBy(xnum, ynum): Cuộn nội dung trong cửa sổ theo chiều ngang là xnum(pixel), theo chiều dọc là ynum(pixel)
  scrollTo(xpos, ypos): Cuộn nội dung trong cửa sổ đến vị trí xpos và ypos
  pageXOffset: Trả về giá trị pixel khi di chuyển thanh cuộn(theo chiều ngang)
  pageYOffset: Trả về giá trị pixel khi di chuyển thanh cuộn(theo chiều dọc) 
    Đối với các trình duyệt IE7, 8 thì giá trị pageXOffset và pageYOffset là undefine mà giá trị này được xác định bởi
      document.documentElement.scrollTop và document.documentElement.scrollLeft;
    Để khắc phục lỗi không định dạng được display: inline-block trên IE7 thì dùng:
    	zoom: 1;
			*display: inline;
    scrollTo(): Nó chỉ di chuyển Scroll đến 1 tọa độ nào đó nhất định
  Ứng dụng: Khi nhấn vào Go to bottom thì phần trang Web của ta sẽ nhẩy về phần cuối -> Scroll sẽ nằm ở cuối trang
    di chuyển 1 đoạn document.body.scrollHeight
    100ms cho di chuyển 20px
  Đang ở phía dưới, khi nhấn vào Go to top thì phần Scroll sẽ di chuyển lên phía trên
- Window relationship: Mối quan hệ giữa các cửa sổ
  opener: Thuộc tính này giúp ta trả về cửa sổ đã mở ra cửa sổ hiện tại
  parent: Thuộc tính này giúp ta trả về cửa sổ cha của cửa sổ hiện tại
  self: Thuộc tính này trả về cửa sổ mà ta đang thao tác hiện tại
    Nó giúp ta thao tác với phần cửa sổ hiển tại
    window.close() = window.self.close()
  top: Trả về cửa sổ trên cùng của trình duyệt

================================================ JS Navigator =================================================
Đối tượng này sẽ cung cấp cho ta các thông tin về trình duyệt web hay còn gọi là Browser. Các thông tin đó bao gồm tên, phiên bản của trình 
  duyệt, các plugin được cài đặt trong trình duyệt
Đa số các phương thức và thuộc tính của Navigator đều được hỗ trợ bởi các trình duyệt phổ biến hiện nay
- Properties & Methods:
  Các thuộc tính:
    appCodeName: Trả về code name của trình duyệt
    appName: Trả về tên của trình duyệt
    appVersion: Trả về thông tin phiên bản của trình duyệt
    cookieEnabled: Kiểm tra các tập tin cookie đã được bật hay chưa? kết quả trả về là giá trị thuộc đối tượng Boolean(true/
    false, 1/0)
    online: Kiểm tra trình duyệt có được thiết lập ở trạng thái online hay không
    platform: Trả về phiên bản (platform) mà trình duyệt đang được thực thi
    userAgent: Trả về giá trị user-agent được gửi đến server bởi trình duyệt
    laguage(systemLanguage): Trả về ngôn ngữ mà trình duyệt đang được thiết lập
      en, vi-VN, en-US 
    plugins: Trả về danh sách các plugs được tích hợp trên trình duyệt 
  Các phương thức:
    javaEnabled(): Kiểm tra trình duyệt có hỗ trợ Java hay không? Kết quả trả về thuộc đối tượng Boolean(true/false, 1/0)
    taintEnabled(): Kiểm tra trình duyệt có hỗ trợ 'data tainting' hay không? phương thức này chỉ hỗ trợ trình duyệt IE và Opera
Thực hành: Các phương thức và thuộc tính của Navigator cũng ít khi sử dụng
- Xác định tên của trình duyệt đang truy cập vào website
  Đối 1 số website thì cần xác định xem trình duyệt truy cập vào website để đưa ra những phần CSS hoặc các loại sử lý phù hợp đối với mỗi
    loại trình duyệt
  userAgent: Lấy được những thông tin userAgent mà phần Browser nó gửi đến Server
- Xác định ngôn ngữ được thiết lập bởi trình duyệt đó
  Website được xây dựng trên nhiều ngôn ngữ, ví dụ như tiếng anh, tiếng việt...
  Khi truy cập vào 1 website nào đó thì website đó sẽ phải xác định xem trình duyệt đó đang được thiết lập bởi ngôn ngữ nào mà nó sẽ đưa ra
    phần ngôn ngữ cho phù hợp
  Trong phần mã nguồn để sử lý phần đa ngôn ngữ thì thường sử dụng giá trị đầu tiên
    vi-VN  -> vi
    en-US -> en
  slice(s, e): Để trích xuất chuỗi từ vị trí thứ s đến vị trí e nhưng không lấy e
  Lưu ý: 
    Không nên sử dụng navigator để xác định các phiên bản của trình duyệt vì trên trình duyệt người dùng có thể thay đổi được các phần
      trình duyệt -> Không được an toàn
    Trình duyệt không xác nhận được phiên bản hệ điều hành được phát triển trước nó
    Một số trình duyệt nó có thể tự ngộ nhận để có thể vượt qua 1 số trang web
- Kiểm tra trình duyệt đã cài đặt plugin nào đó hay chưa?
  VD: Shockware Flash

================================================ JS Screen =================================================
Cung cấp các thông tin về màn hình của người dùng khi họ truy cập website
Các thuộc tính của Screen đều được hỗ trợ bởi các trình duyệt phổ biến hiện nay
Đối tượng này có 1 số các thuộc tính và không có phương thức
Các thuộc tính:
  availHeight: Trả về chiều cao của màn hình(không bao gồm phần taskbar)
  availWidth: Trả về chiều rộng của màn hình(không bao gồm phần taskbar)
  colorDepth: Trả về số bits được sử dụng để chỉ ra màu sắc của 1 pixel trong 1 hình ảnh
  pixelDepth: Trả về độ phân giải màu(số bit trên 1 điểm ảnh) của màn hình
  height: Trả về chiều cao của màn hình(bao gồm phần taskbar)
  width: Trả về chiều rộng của màn hình(bao gồm phần taskbar)
Ứng dụng: Mở 1 cửa sổ và cho cửa sổ đó nằm chính giữa màn hình(Desktop)

================================================ JS History =================================================
Đối tượng này giúp cho ta thao tác với phần history của trình duyệt web
Thuộc tính:
  length: Trả về số lượng URL được lưu trong danh sách history của trình duyệt
    Đối với trình duyệt IE và Opera thì nó được bắt đầu từ giá trị 0
    Đối với trình duyệt Chrome, Firefox và Safari thì nó sẽ bắt đầu bằng giá trị 1
Phương thức:
  back(): Tải lại URL trước đó có trong danh sách history của trình duyệt
    Tương đương với history.go(-1)
  forward(): Tải lại URL sau đó có trong danh sách history của trình duyệt
    Tương đương với history.go(1)
  go(): Tải lại 1 trang nào đó có trong danh sách history của trình duyệt
Ứng dụng: 
    1. Vào trang index
    2. Vào Article2(#article2)
    3. Back  
      Như vậy thì khi đang ở trang Article2 để quay trở lại trang index thì có thể dùng history.back
    3. Article3
    4. Article2 
    5. Back => Article3
    6. Next => Article2
    --------------------------------------
    1. index
    2. Article2
    3. Next=>null
    4. Back=>index
    5. Next=>Article2
    6. go(-1)=>index
    7. go(1)=>Article2
    --------------------------------------
    1. index
    2. Article1
    2. Article2
    3. Article3
    4. go(-2)=>Article1
================================================ JS Location =================================================
Đối tượng này gồm các thông tin về URL của cửa sổ hiện tại và nó có thể chuyển hướng của cửa sổ đến URL khác
Các thuộc tính:
  hash: Thiết lập hoặc trả về giá trị hash(bắt đầu bởi dấu #) của 1 URL
  host: Thiết lập hoặc trả về giá trị host và port của 1 URL
  hostname: Thiết lập hoặc trả về giá trị hostname 1 URL
  href: Thiết lập hoặc trả về giá trị href của 1 URL
  pathname: Thiết lập hoặc trả về giá trị pathname của 1 URL
    Là giá trị sau phần host
  port: Thiết lập hoặc trả về giá trị pathname của 1 URL
  protocol: Thiết lập hoặc trả về giá trị protocol(có bao gồm cả dấu :) của 1 URL
  search: Thiết lập hoặc trả về giá trị search(bắt đầu bởi dấu hỏi) của 1 URL
  Ví dụ: Có URL có dạng là
    http://www.webtest.vn:8080/public/the-thao/bong-da-vn.html#title
  Các thành phần của URL:
    Href(chính bằng toàn bộ URL): http://www.webtest.vn:8080/public/the-thao/bong-da-vn.html#title 
    Protocol: http
    Host: www.webtest.vn:8080
    Hostname: www.webtest.vn
    Port: 8080
    Pathname: public/the-thao/bong-da-vn.html
    Hash: #title 
  URL: http://proj_news.xyz/bom/location/01.html?student=nguyenvana#article
    Href: http://proj_news.xyz/bom/location/01.html?student=nguyenvana#article
    Protocol: http:
    Host: proj_news.xyz
    Port: Có giá trị là rỗng khi port đang được set giá trị mặc định là 80
    Hostname: proj_news.xyz
    Pathname: /bom/location/01.html
    Hash: #article
    Search: ?student=nguyenvana
Các phương thức:
  assign(): Tải một URL mới
  reaload(foreGet): Tải lại trang hiện tại. Tham số foreGet nhận 2 giá trị
    True: Tải lại trang từ server
    False: Tải lại trang từ cache(mặc định)
  replace(): Thay thế URL hiện tại bởi một URL mới
  Khác biệt giữa hàm replace() và assign() là assign thì có thể back được lại trang trước đó còn replace thì không
Thực hành:
  Lấy giá trị protocol nhưng bỏ đi dấu : bằng cách bỏ đi ký tự cuối cùng hoặc là replace dấu : bằng ký tự rỗng
  ...

================================================ JS Cookies =================================================
Là 1 dạng bản ghi được tạo ra và lưu lại trên trình duyệt của người dùng khi người dùng truy cập vào 1 website nào đó
Đối với người dùng , cookie làm cho website trở lên tiện lợi hơn, họ có thể truy cập vào website nhanh hơn mà không phải
  nhập lại những thông tin nhiều lần
Một số trường hợp mà chúng ta có thể sử dụng cookie
  Đối với các trang web thương mại điện tử, sử dụng cookie để ghi nhớ các thông tin khách hàng để họ không cần nhập lại 
    thông tin nhiều lần khi tiến hành đặt hàng
  Lưu thông tin ngày gần đây nhất mà người dùng truy cập vào website
  Thống kê số người truy cập trên website
Các thành phần của cookie
  Expries: Xác định thời điểm cookie sẽ bị hết hiệu lực trên trình duyệt
  Domain: Xác định tên miền sẽ được sử dụng để gửi cookie đi
  Path: Đường dẫn hoặc thư mục trên trang web đã thiết lập cookie
  Secure: Nếu giá trị này được thiết lập bên trong cookie, thông tin sẽ được mã hóa trong quá trình truyền giữa server và 
    Browser
  Name: Tên để phân biệt giữa các cookie khác nhau
  Vd:
    escape(): Để mã hóa 1 chuỗi nào đó
    Khi đọc cookie thì các biến cookie được cách nhau bởi dấu ; do đó để đọc được ra thành từng biến thì phải tiến hành tách
      chuỗi thu được thành 1 mảng
    Để xóa 1 cookie thì cần cho biết tên của cookie muốn xóa, xóa bằng cách set lại giá trị cho cookie đó với giá trị expires
      là time trong quá khứ

Xây dựng 1 số hàm set, get và delete cookie
  Tạo cookie: Khi tạo 1 coookie thì cần biết name, value và thời gian tồn tại của cookie
  Xóa cookie: Cần biết cookie đó tên gì
  Khi muốn lấy giá trị của 1 cookie thì cần biết tên của cookie đó

Thực hành: 
  1. Sử dụng JS Cookie để lưu tên của một khách viếng thăm. Sau này, mỗi khi vị khách đó truy cập vào trang web sẽ nhận được
    một lời chào
  2. Thống kê số lần truy cập vào trang web của người dùng
  3. Lưu trữ các thông tin ở các ô input đã được nhập bởi người dùng
    Việc này sẽ giúp cho người dùng đỡ mất nhiều thời gian để nhập vào những giá trị mà họ đã nhập

================================================ Javascript & XML =================================================

XML Basic
  1.XML
    XML(eXtensible Markup Language): Ngôn ngữ đánh dấu mở rộng
      Là ngôn ngữ gần giống như HTML
      Các thẻ của XML là do người viết tạo ra theo các kỹ thuật XML
      Các thẻ XML rất giống với HTML bao gồm
        Thẻ(tag)
        Dữ liệu(data)
        Thuộc tính(attribute)
      Trong 1 tập tin XML bất kỳ thì phải có tối thiểu là 1 nút được gọi là nút gốc
    XML dùng để:
      Lưu trữ thông tin nhỏ như 1 menu của website, thông tin của tác giả...
      Kết hợp với javascrip để tạo ra kỹ thuật Ajax
      Có tác dụng lưu trữ dữ liệu
      Cấu trúc để truyền dữ liệu
      -> Không phải là tập tin để hiển thị dữ liệu mà là tập tin để chứa và trao đổi dữ liệu
    <?xml version="1.0" encoding="UTF-8"?> là dòng mặc định phải có khi tạo ra 1 tập tin XML
    Có thể sử dụng PHP để tạo ra 1 tập XML
    Rule:
      Mỗi tập tin XML phải có 1 nút gốc
        Khi mở 1 tập tin không có nút gốc:
          This page contains the following errors:
          error on line 14 at column 1: Extra content at the end of the document
          Below is a rendering of the page up to the first error.
      Mỗi khi mở thẻ thì phải có thẻ đóng 
      Khi 1 thẻ không có dữ liệu thì có thể viết tắt: <img file="jquery.png" />
      Tên của các phần tử trong tập tin XML có phân biệt chữ hoa chữ thường
      Ghi chú: <!-- Ghi chú -->
      Các giá trị thuộc tính thì nên để trong ngoặc kép ""
      Trong nội dung của thẻ hay thuộc tính thì không được chứa các giá trị đặc biệt: & < > " '
        Khi đưa các giá trị đặc biệt trên vào thì phải sử dụng các giá trị khác:
          & -> &amp;
          < -> &lt;
          > -> &lt;
          " -> &quot;
          ' -> &apos;
      <![CDATA[]]>: Nếu muốn lưu trữ 1 đoạn mã nào đó mà trong đó có nhiều ký tự đặc biệt, mà không cần phải thay đổi nó thành các ký
        hiệu html

  2.XSL(eXtensible Stylesheet Language): Là ngôn ngữ để định dạng cho tập tin XML
    Định dạng lại tập tin XML giúp khi xem 1 tập tin XML trên trình duyệt dễ nhìn hơn
    xsl:stylesheet: Thẻ này để trình duyệt hiểu rằng đây là tập tin định dạng kiểu
    xsl:template: Thẻ này cho phép đưa mã html vào
    xsl sẽ giải quyết vấn đề hiển thị nội dung xml ra phía ngoài
    <xsl:template match="/">: Khi match được truyền giá trị là '/' thì có nghĩa là chọn toàn bộ tập tin
      match cho ta biết nó sẽ đi vào đâu của tập xml, có thể chỉ thị cho nó bắt đầu từ 1 node nào đó của tập tin xml
    <xsl:value-of select="book/weight/@units" />: Dùng @ để lấy giá trị thuộc tính của thẻ
    <xsl:if test="weight/@units != 'gam'">: Điều kiện cả thuộc tính
    <xsl:choose>, <xsl:when>, and <xsl:otherwise> Là câu điều kiện nó giống với câu điều kiện if-else hay switch-case trong javascrip
    <xsl:for-each select="book[pages = 500]">: Dùng vòng lặp kết hợp với điều kiện

    -> Hiển thị cũng không khác gì html nhưng dữ liệu của nó lấy ra là từ trong tập tin XML, XML thường dùng để lưu trữ thông tin nhỏ,
      còn khi có lượng thông tin lớn hơn thì lưu vào trong DB 

  3.XPath: Là cú pháp dùng để định nghĩa các phần của XML, dùng các biểu thức để truy xuất đến các thành phần trong XML như thuộc tính
    hay phần tử
    Chứa đựng 1 thư viện những phương thức để chúng ta có thể thực hiện các thao tác trên XML
    Là 1 phần tử lớn trong ngôn ngữ XSL
    xsl:template... là các lệnh của tập tin XSL, những giá trị nằm ở trong match hoặc select là XPath. 
      / Là lấy nút gốc
      Muốn lấy nội dung của 1 nút nào đó thì cần phải biết tên của nút đó
      // Có thể truy xuất đến 1 node nằm trong tập tin XML ở vị trí bất kỳ mà không cầfn phải đi đúng đường dẫn
      . Lấy toàn bộ thông tin của nút hiện thời
      .. Lấy ra toàn bộ các giá trị nằm trong phần tử cha
      @ Truy cập đến thuộc tính nào đó
    Truy xuất các phần tử theo các vị trí nào đó ở trên XML
      path/book[2]: Lấy ra thông tin của node ở vị trí số 2 
      path/book[last()]: Lấy ra thông tin của node ở vị trí cuối cùng 
      path/book[last()-1]: Lấy ra thông tin của node ở vị trí kế cuối 
      path/book[@id]: Lấy ra thông tin của các node có tồn tại thuộc tính id 
      path/book[@id=n]: Lấy ra thông tin của các node có tồn tại thuộc tính id có giá trị bằng n
      //book/title | //book/author: Lấy ra giá trị của title và author
    Các hàm thông dụng của XPath
      Biểu thức so sánh:
        Lớn hơn: &gt;
        Nhỏ hơn: &lt;
        Bằng: =
        Khác: !=
      Các phép toán:
        + - * div
      Hàm làm tròn:
        format-number: format-number(100 - (price/saleoff div price/real)*100, '##0.##')
        round: round(100 - (price/saleoff div price/real)*100)
        count: count(book_shop/book)
        sum: sum(book_shop/book/price/saleoff)
    -> XSL hỗ trợ các phương thức để có thể truy xuất đến các phần mình muốn, XPath giúp xác định rõ các giá trị muốn lấy

XML JavaScript: Kết hợp giữa JavaScript và XML, sự kết hợp giữa JavaScript và XML được gọi là XML DOM
  Ajax load
    Kết hợp giữ XML và JavaScript, đây là nền tảng của Ajax, nó kết hợp giữ XML, JavaScript và html để tạo thêm 1 kỹ thuật được gọi là 
      kỹ thuật Ajax
    XMLHttpRequest: Là đối tượng rất quan trọng, đối tượng này giúp chúng ta tạo ra kỹ thuật Ajax
    Thực hiện load lên nội dung của tập tin XML, txt, PHP hoặc html
    Trong đối tượng XMLHttpRequest có rất nhiều thuộc tính và phương thức như responseText, responseType, responseXML. Đây là phần trả về, 
      đây là phần mà kỹ thuật Ajax đang sử. Nó có thể:
        Update a web page without reloading the page
        Request data from a server after the page has loaded
        Receive data from a server after the page has loaded
        Send data to a server in the background
    Ở 1 số trình duyệt thì nó không hỗ trợ đối tượng XMLHttpRequest, nhất là đối với IE -> trong trường hợp không hỗ trợ đối tượng XMLHttpRequest
      thì lúc này lấy đối tượng XMLHttpRequest thông qua ActiveXObject("Microsoft.XMLHTTP");
    http có 2 phương thức đó là GET và POST, khi mở tập tin thì sử dụng phương thức GET
    Khi mới khởi tạo đối tượng XMLHttpRequest thì readyState có giá trị bằng 0, nghĩa là chưa chuẩn bị đọc tập tin mình muốn. Khi sử dụng phương
      thức open() -> readyState có giá trị bằng 1, có nghĩa là nó chuẩn bị đọc tập tin mình muốn -> nhận được thông tin là lấy về nội dung của
      tập tin mình muốn(tập tin này nằm trên server). Sau khi send() thì readyState có giá trị bằng 4 -> đã nhận được dữ liệu về
    status:200 -> đường dẫn có tồn tại
    readyState: 4 Lúc này thì đã lấy được nội dung tập tin từ server -> có thể sử dụng nó để thực hiện những gì mình muốn

  XMLHttpRequest:
    Là 1 đối tượng của JavaScript được sử dụng rất nhiều trong các ứng dugnj web, nó được áp dụng ở trong kỹ thuật Ajax
    Thuộc tính:
      readyState: Khi truy xuất vào thuộc tính này, nó sẽ trả về cho mình số nguyên có giá trị từ 0 -> 4
        0: request not initialized. Nó thông báo cho ta trạng thái của đối tượng XMLHttpRequest chưa thực thi phương thức open()
        1: server connection established. Phương thức open() đã được thực thi nhưng phương thức send() chưa được thực thi
        2: request received
        3: processing request
        4: request finished and response is ready. Đã gửi yêu cầu lên server và nhận về đầy đủ thông tin của server tiếp đó là kết thúc quá trình
          nhận dữ liệu.
          Trong trường hợp nhận được giá trị trả về nhưng nó là Not Found thì cũng có giá trị là 4. Xảy ra khi truy cập vào 1 địa chỉ nào đó mà nó
            không tồn tại
        2: Yêu cầu đã được gửi tới máy chủ nhưng chưa nhận được giá trị trả về, điều này có thể xả ra khi vị trí của server ở quá xa
        3: Đã nhận được dữ liệu trả về nhưng chưa phải là toàn bộ dữ liệu đó
        -> 5 giá trị này trên thực tế rất quan trọng khi chúng ta xử lý Ajax
      status:
        200: Quá trình gửi thông tin đến máy chủ và quá trình máy chủ gửi lại thông tin về trình duyệt đã thành công
        404: Tập tin không tồn tại trên server nên nó không nhận được dữ liệu mong muốn
        Mở rộng:
          情報レスポンス (100–199),
          成功レスポンス (200–299),
          リダイレクト (300–399),
          クライアントエラー (400–499),
          サーバエラー (500–599)
      statusText: Có giá trị là Ok và Not Found
      responseText
      responseXML

    Phương thức:
      abort(): Giúp hủy bỏ yêu cầu gửi đến server. Có nghĩa là sau khi đã thiết lập giá trị cho phương thức open(), tiếp đó gửi thông tin đến
        server bằng phương thức send() để chuẩn bị nhận dữ liệu về thì trong quá trình gửi và đang nhận dữ liệu nếu muốn hủy đi cái giao thức
        nhận dữ liệu thì có thể sử dụng phương thức abort()
        -> Hủy bỏ yêu cầu hiện thời
      getAllResponseHeaders() Giúp lấy về những thông tin header của tập tin mà mình sẽ Request đến
        date: Sat, 05 Oct 2019 07:20:17 GMT                       -> Ngày Request
        server: Apache/2.4.37 (Win32) OpenSSL/1.1.1 PHP/7.2.12    -> Server đang sử dụng là Window hay Linux
        connection: Keep-Alive                                    -> Trạng thái đang kết nối
        x-powered-by: PHP/7.2.12                                  -> Ngôn ngữ đang sử dụng là PHP
        content-length: 423                                       -> Chiều dài của tập tin mà mình Request đến
        keep-alive: timeout=5, max=99                             -> Thời gian timeout và thời gian kết nối tối đa 
        content-type: text/html; charset=UTF-8                    -> Kiểu dữ liệu trả về
      getResponseHeader(val): Lấy ra thông tin nào từ trong tập hợp các thông tin mà được trả về từ máy chủ
        xhttp.getResponseHeader('content-type')
          -> text/html; charset=UTF-8
      open(method,url,async):
        async:
          False: Sử dụng ở trạng thái đồng bộ. xhttp.onreadystatechange không kiểm soát trạng thái thay đổi của readyState
          true: Sử dụng ở trạng bất đồng bộ -> Sự kiện xhttp.onreadystatechange kiểm soát trạng thái thay đổi của readyState
            Như vậy thì khi truyền true cho async thì mình có thể sử dụng được sự kiện onreadystatechange, vì nó sẽ kiểm tra liên tục thay đổi
              để giúp mình có thể điều khiển được nó dễ hơn
          -> Khi sử dụng giá trị true thì có thể kiểm xoát các trạng thái của quá trình xử lý Ajax. Khi sử dụng Ajax thì truyền giá trị true rồi 
            sau đó kiểm tra 1 số thông tin
        xhttp.readyState === 4 && xhttp.status === 200
          4: Quá trình gửi và nhận dữ liệu đã xong(OK/Not Found),  
          200: Đã nhận được dữ liệu mong muốn từ trên server về  
    
    xhttp.open("POST", "files/005.php", true): open() với phương thức là POST
      Khi dùng với phương thức POST thì thường nó được dùng cho 1 phần đó là Ajax Form
      Khi nhấn nút để lấy nội dung của 1 file nào đó trên server thì thực hiện gửi nội dung đã nhập trong Form lên server
      Gửi qua phương thức send()
      Để máy chủ có thể nhận được thông tin gửi lên qua phương thức send() thì phải sử dụng đến phương thức setRequestHeader()
      server sử lý và trả về dữ liệu kiểu XML
      var flag = xmlDom.getElementsByTagName("flag")[0].childNodes[0].nodeValue -> Truy cập các phần tử trong XML và lấy ra giá trị của nó
    setRequestHeader(): Có thể được dùng để gửi giá trị lên server bằng cách truyền cặp giá trị label/value làm tham số
      xhttp.setRequestHeader("Token", "9999");
      Trên server có thể lấy được giá trị ra thông qua $_SERVER

  Convert XML: Đọc 1 tập tin XML và xuất nó ra ngoài trình duyệt
    Từ 1 chuỗi có cấu trúc XML, từ chuỗi đó lấy ra thông tin cần thiết để in ra trình duyệt, từ chuỗi đó chuyển đổi thành 1 đối tượng XML
        để có thể truy xuất dễ dàng
      Đối tượng dùng để chuyển đổi thì trên các trình duyệt khác nhau, đối tượng dùng để chuyển đổi cũng khác nhau
        Trên các trình duyệt như Chrome thì đối tượng dùng để chuyển đổi là window.DOMParser nhưng nó lại không tồn tại ở trên IE
        Đối với trình duyệt IE cũ thì dùng ActiveXObject("Microsoft.XMLDOM")
    Chuyển đổi 1 đối tượng XML thành 1 chuỗi, việc chuyển đổi này thực hiện khi truyền dữ liệu đi giữa các server
      (new XMLSerializer()).serializeToString(xmlDOM); -> Chrome
      IE: xmlDOM.xml;

  Read nodes: Truy xuất các giá trị ở trong tập tin XML bằng JavaScript
    Có 2 cách để thực hiện đó là sử dụng các kiến thức liên quan đến node, đối với XML thì nó cũng là 1 cây, ở trong đó có nhiều node vì thế 
      có thể truy xuất bằng cách
      Cách 1: Sử dụng các phương thức của node: CharacterData, Document, Element
        -> Để truy xuất vào 1 node thì quá phức tạp, nó phải qua nhiều công đoạn để thực hiện
        getAttribute(): Dùng để lấy giá trị của thuộc tính của node
        Việc sử dụng các con số để truy xuất đến các node thì có phần hạn chế đó là nếu như cấu trúc của tập tin XML thay đổi thì các chỉ số
          không còn đúng nữa -> để tránh việc truy xuất qua các chỉ số thì có thể truy xuất thông qua tên của các thẻ trong tập tin XML
          -> getElementsByTagName()
        Khi truy vấn vào các phần tử XML khá dài dòng, dễ nhầm -> tạo ra các hàm để khi sử dụng nhanh gọn hơn
      Cách 2: Sử dụng xPath
        xmlDOM.evaluate: Phương thức này chỉ tồn tại trên các trình duyệt như Chrome - W3C, không tồn tại trên IE
          -> Bước này tạo ra đối tượng XPathResult
        Muốn lấy được ra thông tin của node thì cần thực hiện tiếp 1 node nữa đó là iterateNext()
        Cách truy xuất bằng xPath như thế này rất đơn giản, đơn giản hơn nhiều so với cách thực hiện bằng getElementsByTagName()
        IE9 - not work for IE10: Truy cập các phần tử XML bằng XPath trên trình duyệt IE
          selectNodes() Lấy được tập hợp các đối tượng
          selectSingleNode() Chỉ lấy node đầu tiên

XML & PHP:
  Để có thể truyền được dữ liệu từ server này sang server khác thì có thể sử dụng XML hoặc là json
  Lấy dữ liệu từ DB để tạo thành 1 tập tin XML
  Có thể sử dụng PHP để đọc 1 tập tin XML và lấy ra những giá trị trong tập tin XML đó
  header("Content-type:text/xml"): Biến tập tin PHP thành tập tin XML
  SimpleXML:
    Tạo ra 1 đối tượng SimpleXML từ string -> simplexml_load_string()
    Đọc 1 tập tin XML bằng SimpleXML simplexml_load_file() -> cũng thu được 1 đối tượng SimpleXML
    Có thể tạo ra 1 chuỗi từ 1 đối tượng SimpleXML -> asXML(), 1 đối tượng thì chúng ta không thể truyền đi giữa các server khác nhau vì vậy 
      thì khi muốn truyền thì phải chuyển đối tượng thành 1 chuỗi
    Truy xuất vào các phần tử của 1 tập tin XML bằng đối tượng SimpleXML, việc lấy ra được giá trị của 1 node trong PHP bằng cách sử dụng SimpleXML
      là rất đơn giản
    Sử dụng phương thức attributes() để truy cập vào thuộc tính của các node
    getName(): Lấy ra được tên thẻ mình đang truy cập

JSON - JS - PHP
  Có tác dụng giống như XML đó là để trao đổi dữ liệu nhưng đối với JSON thì cách truy vấn vào các giá trị cũng như các thuộc tính của JSON
    rất đơn giản
  Json có thể lưu trữ được các thông tin dạng chuỗi, số, đối tượng, mảng..
  Tương tự như trong các node XML thì nó có node và thuộc tính, vì vậy khi lưu dữ liệu có dạng cấu trúc XML thì lưu mỗi nốt là 1 đối tượng nó
    lưu 2 phần là data và attributes. Trong đó attributes chứa các thuộc tính của node, data chứa các node con trong trường hợp nó chứa node con
    còn không thì lưu giá trị của node đó.
  XML có nhiều node chính -> lúc này để JSON có thể lưu được dữ liệu có cấu trúc XML như vậy thì đối tượng JSON có
    có 1 thuộc tính đầu tiên là 1 mảng, mảng đó chứa cấu trúc của XML, mỗi phần tử của mảng là 1 đối tượng chứa cấu trúc của 1 node
    books = {
        data: [
          {
            data: { 
              title : "Lập trình jQuery",
              author: "Quang",
              pages : 500,
            },
            attributes: { 
              id: 11,
              type: "small"
            }
          },
          {
            data: { 
              title : "Lập trình Joomla",
              author: "Quang",
              pages : 700,
            },
            attributes: { 
              id: 22,
              type: "small"
            }
          },
          {
            data: { 
              title : "Lập trình Zend Framework",
              author: "Quang",
              pages : 1200,
            },
            attributes: { 
              id: 33,
              type: "small"
            }
          }
        ]
      };
    
    Để truy cập vào dữ liệu đối tượng dạng trên thì dùng đến vòng lặp for:
			for (let i = 0; i < books.data.length; i++) {
				var book = books.data[i];
				console.log(book.data.title);
				console.log(book.attributes.id);
			}
  Có thể truyền 1 đối tượng json đến server khác, và trên server đó sẽ lấy giá trị json để sử lý
    -> Có 2 cách chuyển đó là GET và POST. Việc truyền theo phương thức nào thì nó tùy thuộc vào ứng dụng của mình
  PHP có thể chuyển đối 1 chuỗi json thành 1 đối tượng bằng json_decode() và ngược lại chuyển 1 đối tượng Json thành chuỗi bằng JS -> stringify()
    PHP -> json_encode()
  Chuyển chuỗi json cho javascrip để sử dụng trong javascrip
    var myObj = eval('<?php echo $strBooks ?>');
    var myObj = <?php echo json_encode($strBooks) ?>;

================================================ DOM =================================================
DOM: Document Object Model -> kiểu đối tượng tài liệu 
  DOM giúp định nghĩa các chuẩn cho việc thao tác hoặc truy cập đến các phần tử trên tài liệu HTML và XML
  Là nền tảng ngôn ngữ giao diện
  Dựa vào DOM có thể lập trình và viết mã để truy cập hoặc thay đổi nội dung cấu trúc của tài liệu HTML hoặc XML
  Để làm việc với DOM thì cần hiểu đến khái niệm node(nhánh của cây) và node list. Mỗi cây có 1 node gốc
    -> Đối với DOM thì các tài liệu html và xml được xem ở dạng cây
  Nội dung(text) hay thuộc tính(attributes) của thẻ cũng được gọi là node
  Trong 1 document HTML thì được chia ra làm các loại node
    Document node: Đó chính là tập tin html
    Element node: Element, text, comment
      Element: html, head, body, h1, a, title
      Text: Nội dung text nằm trong thẻ 
    Attribute node: các thuộc tính như href...
    Text node: Ở trong text node thì sẽ không còn có node nào khác
  Truy cập node(phần tử html):
    Truy cập qua id, tagname, class 

Node:
  getElementByID:
    var boxA = document.getElementById("boxA"); // -> Thu được node
    console.log(boxA.id);                            -> Truy cập thuộc tính của node
      boxA                    
    console.log(boxA);
      <div id="boxA" class="boxA">
        <h1 class="title">Thuộc tính của NODE</h1>        
        <div id="author">Quang</div>    
        <p id="website">quangvlog.vn</p>
      </div>

    console.log($("#boxA")) -> thu được 1 đối tượng jQuery
    Mỗi thẻ của html đều là 1 đối tượng, nó có các phương thức và thuộc tính
  
  getElementsByTagName:
    Giúp lấy được các thẻ html bởi tên của các thẻ đó
    Tập hợp các thẻ html thu được(HTMLCollection || nodeList) -> Tập hợp các thẻ html
    Có thể lấy ra được tất cả các thẻ div ở 1 trang html có thể lấy dc các thẻ div ở trong 1 vùng nào đó của trang html
    Khi tập hợp các phần tử/nodeList nó là 1 đối tượng -> có thể sử dụng các phương thức hay thuộc tính của nodeList
      Thuộc tính: length
      method: item(number index)

  getElementsByClassName:
    Phương thức này không được hỗ trợ trên IE7,8 hay version thấp hơn, vì vậy cần phải viết 1 hàm để có thể thực hiện được 
      việc lấy ra list các phần tử dựa vào className của nó.
      function getElementsByClassName(parentNode, targetClass) {
          var retnode = []
          var elements = parentNode.getElementsByTagName("*");
          if (elements.length > 0) {
              var myClass = new RegExp("\\b" + targetClass + "\\b");
              for (i = 0; i < elements.length; i++) {
                  var classes = elements.item(i).className;
                  if (myClass.test(classes)) {
                      retnode.push(elements.item(i));
                  }   
              }
          }

          return retnode;
      }

  Thuộc tính Attribute: Các thuộc tính của 1 đối tượng node
    attributes: Lấy ra các thuộc tính của node, kết quả trả về là 1 NameNodeMap Object
      Khi sử dụng thuộc tính attributes của node thì sẽ có 1 số sự khác biệt trên các IE, trên thư viện jQuery thì đã sử lý các vấn đề này
      Đối tượng NameNodeMap có các phương thức và thuộc tính đó là như
        length: Không hỗ trợ trên IE7
        getNamedItem() -> Thu được 1 node, node thì có các phương thức như nodeName, nodeValue
        item()
        Chỉ từ IE8 trở lên thì mới có thể gán giá trị vào cho 1 thuộc tính, còn IE7 thì không thực hiện được
        removeAttribute: IE8+