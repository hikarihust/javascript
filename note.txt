								Object
- 3 cách thường sử dụng để tạo ra 1 đối tượng
	- Dùng function, nó cũng được coi là 1 đối tượng
	- this + tên của đối tượng
	- Khởi tạo ra 1 đối tượng trực tiếp, ở đây thì do mình tạo 1 đối tượng trực tiếp nên không cần
		phải tạo phần thể hiện của nó.
- Tạo ra các thuộc tính và phương thức cho đối tượng và truy cập vào giá trị của thuộc tính đó
- Phương thức và cách truy cập vào phương thức, cách viết làm sao cho dễ nhìn, dễ thấy có bao nhiêu
	phương thức

- Public và private: 
	Nếu biến hoặc phương thức được đặt ở trạng thái public thì nó sẽ được sử dụng
		ở trong đối tượng đó cũng như là ở trong phần thể hiện của đối tượng đó.
		Còn nếu như phương thức hoặc thuộc tính ở trạng thái private thì nó chỉ được sử dụng ở trong phần
		định nghĩa của đối tượng đó mà thôi, mà không thể sử dụng ở phần thể hiện của đối tượng đó.
	Thuộc tính ở trạng thái private thì mình không thể truy cập trực tiếp được mà phải truy cập thông qua
		một phương thức khác của đối tượng đó

- Truyền đối tượng vào đối tượng
- Truyền giá trị vào phương thức
- Kế thừa: Tạo ra 1 đối tượng con mà nó kế thừa các phương thức và thuộc tính của phương thức cha, lúc này
	đối tượng con được tạo ra nó có thể sử dụng tất các thuộc tính cũng như là phương thức đã được định 
	nghĩa bởi đối tượng cha.
	--> dùng từ khóa call.
- Ôn tập kiến thức về Object trong Javascript
	Tạo ra đối tượng để tạo ra các hình vẽ
	Để vẽ ra được các box thì cần có chiều rộng, chiều cao, màu nền, màu chữ và nội dung văn bản nằm ở trong
	box đó là gì

-----------------------------------------------------------------------------------------------------------

						jQuery - Plugin

Zoom Plugin:
- Học cách sử dụng các phương thức sẵn có của jQuery để viết lên 1 Plugin
- Sau khi nghiên cứu xong các phương thức trong tập hợp các phương thức của jQuery, thì tiếp theo mình sẽ
	nghiên cứu đến jQuery Plugin.
- jQuery Plugin là 1 phương thức để ta sử lý 1 vấn đề nào đó.
	Ví dụ ta có Add() là 1 phương thức của jQuery, thì ở đây Plugin nó cũng có tác dụng giống như phương thức 
	Add(), có nghĩa là ban đầu mình xác định 1 phần tử của jQuery rồi sau đó gọi đến Plugin mà mình sử lý.
- Khi muốn xây dụng 1 ứng dụng nào đó, sử dụng cách viết của jQuery Plugin để cho nó thuận tiện và dễ di chuyển
	Plugin đó qua các ứng dụng khác.
- Thường thì Plugin sẽ được viết trong 1 tập tin js sau đó nhúng tập tin đó vào ứng dụng của mình
- zoom.plugin.js --> nhìn vào tên file mình sẽ biết được đó là 1 tập tin như thế nào(plugin)

- Ứng dụng viết 1 Plugin để phóng to và thu nhỏ.
	- Chúng ta có thể sử dụng 1 phương thức trong phần hiệu ứng để thực hiện điều này đó là animate() nhưng ở đây
		mình sẽ viết thành 1 Plugin để sử dụng, để qua đó hiểu được Plugin trong jQuery là như thế nào
	- (function($){})(jQuery) --> Đây là 1 cú pháp viết 1 Plugin trong jQuery, cú pháp này được jQuery khuyên dùng
		vì nó sẽ hạn chế được phần conflict giữa các framework khác nhau.
	- (function($){
		$.fn.zoomIt = function(options){};
	  })(jQuery);
	  Hàm bên trong chính là mã nguồn của Plugin để chúng ta sử dụng
	  zoomIt: Là tên của Plugin
	-$(document).ready(function(){
		$("#zoomIn").click(function(e) {
	        $("#box").zoomIt({width: 80, height: 70})
					 .removeClass("bg01").addClass("bg02");
	    });
		
		$("#zoomOut").click(function(e) {
	        $("#box").zoomIt({width: 120, height: 130})
					 .removeClass("bg02").addClass("bg01");
	    });
	});
		--> Đôi khi thì không cần phải đưa đoạn mã chạy hàm nào đó vào trong tập tin html mà có thể đưa vào trong tập
			tin js rồi sau đó nhúng vào html --> mã html sẽ dễ nhìn hơn, dễ tìm kiếm hơn
	- extend: options = $.extend(defaults,options)
		Sẽ nhận được giá trị defaults mới và gán giá trị mói đó cho biến options. Đối tượng options sẽ đè lên các 
		giá trị trong đối tượng defaults và sẽ sẽ bổ sung vào các giá trị mà trong đối tượng defaults không có.
	- animate: Dựa vào phương thức này thì mình có thể thay đổi được kích thước
	- return this: Để khi mình viết 1 Plugin, sử dụng nó và ta có thể sử dụng tiếp các phương thức của jQuery cung cấp

----------------------------------

Simple slider plugin:
- Là 1 Slide để cho các ảnh chuyển động
- Để biến div#slide thành 1 phần trình diễn ảnh thì mình sẽ sử dụng 1 Plugin đó là simpleSlide.
- Ở đây thì cách gọi Plugin trong phần Zoom
	$("#box").zoomIt({width: 120, height: 130}) --> Ở phía trước là đối tượng mình tương tác
	$.simpleSlide("#slide",{'itemDefault': 2,'from': 'az','auto': true}) --> Không có đối tượng ở phía trước, đối tượng
		tương tác sẽ nằm ở trong phần tham số
	--> Ta sẽ nghiên cứu thêm 1 cách viết Plugin khác
- setInterval(): Phương thức này có 2 tham số, tham số thứ nhất là 1 function, tham số thứ 2 là time để thực hiện hàm đó
	phương thức setInterval() này được gọi liên tục cho đến khi phương thức clearInterval() được gọi thì dừng lại
- fadeOut(): Ẩn đi đối tượng, có hiệu ứng khác với --------hide()
- fadeIn(): Hiển thị đối tượng, có hiệu ứng khác với -------show()
- eq(): Lấy ra 1 phần tử trong tập hợp với chỉ số index được truyền vào, chỉ số được đánh dấu từ 0
- children(): Lấy ra tập hợp các phần tử con, khác với find() là children() chỉ lấy ở cấp con còn find() thì lấy hết cả 
	các phần tử cháu...
- title: Là thuộc tính mình tự thêm vào
- find(): Tìm trong selector --> tính tất cả các level con, cháu
- text(): Đưa nội dung vào trong thẻ -------------value(), html()
- attr(): Lấy giá trị thuộc tính của thẻ

-----------------------------------------------------------------------------------------------------------

							Xây Dựng Ứng Dụng jQuery

Autocomplete:
----------- Không truyền vào Selector: Ở phần viết Plugin này mình sẽ biết thêm 1 cách viết plugin nữa đó là không cần
	truyền vào đó là selector gì.
- Đây là ứng dụng rất thực tế và thường được sử dụng trong các ứng dụng Web
- Ứng dụng bao gồm ô Textbox thì nó sẽ lấy ra tiêu đề của các cuốn sách nằm ở phía trong của phân Database, ứng với mỗi
	một tiêu đề được hiện ra được gắn vào 1 đường link để khi click vào đó sẽ chuyển đến trang của quyến sách tương ứng
- Khi có 1 danh sách quá dài thì không thể sử dụng SlectBox để liệt kê tất cả những giá trị ở trong đó ra mà nên sử dụng
	AutoComplete để lấy ra được Id của nó
- 2 ứng dụng: link và Id
	Khi không có link thì khi click vào 1 item result thì nó sẽ lấy id và truyền vào ô text box ẩn, và giá trị được click
	sẽ nằm vào trong ô input keywords
- mID: Ô input ẩn, lưu lại ID trong trường hợp cần ID để Submit Form truyền sang 1 trang sử lý nào đó
- div.results: Thẻ để đưa vào kết quả tìm kiếm
- val(): Lấy giá trị trong ô input ---- html(), text()
- Khi ta thực hiện click hoặc focus vào ô tìm kiếm, nếu giá trị trong ô đó là "Enter keyword here..." thì nó sẽ xóa trắng
	đồng thời xóa luôn các thuộc tính mình đã thiết lập style cho "Enter keyword here..."
	--> cần 2 sự kiện cùng 1 lúc đó là focus và click
- Khi đang focus vào trong ô input keyword không có nội dung gì mà click chuột ra ngoài thì ô input đó sẽ lại hiện thị lên 
	câu thông báo vào trong ô input "Enter keyword here..."
	Trong trường hợp trong ô input có dữ liệu mà dời focus ra khỏi ô đó thì vẫn giữ lại dữ liệu đã nhập
- on(): tham số đầu tiên là các sự kiện, gắn vào cùng 1 hàm sử lý cho cùng 1 đối tượng cho các sự kiện khác nhau
- blur(): Dời khỏi ô input keyword, không con focus lên đối tượng nữa, nó cũng có thể xảy khi mà mình nhấn nút Tab
- Hiển thị kết quả, đó là 1 danh sách ---> sử dụng <ul>, <li>
- list-style: none inside ---> Không hiển thị icon của <li>, khoảng cách sẽ được tính từ phía bên trong của <ul>
- Thiết lập cho thẻ div.results có độ dài bằng với ô input ----> dùng jQuery để thực hiện thiết lập kích thước, vị trí
- Kết quả hiện thị là 1 list bao gồm các thẻ <li>, khi mà hơ chuột lên các thẻ <li> đó thì sẽ làm đổi màu background, khi hơ
	lên <li> thì sẽ hiển thị con trỏ chuột
- white-space: Thuộc tính của nhóm text, định dạng cho các khoảng trắng, giá trị nowrap thì xuống dòng được quy về thành 1 
	khoảng trắng bình thường-----> hiển thị dữ liệu mà không bị xuống dòng
- title: Thuộc tính này của phần tử có tác dụng là khi di chuột lên đối tượng đó thì có thể nhìn được phần nội dung gán vào title
- Ajax:
	dataType ---> Kiểu dữ liệu trả về
	data ----> Dữ liệu truyền lên server
	done() Sau khi truyền dữ liệu lên-->thành công-->tiếp theo sẽ thực hiện hành động mong muốn
	LIKE '%{$keyword}%'   ---------   LIMIT {$limit} ------ Cách đặt biến mà không cần dùng dấu "." để nối
- html(): Có thể đưa vào giá trị chuỗi có định dạng html  ---- val(), text()
- $books = array(); --> Cần phải khai báo là 1 mảng rỗng từ ban đầu, để khi không có kết quả tìm kiếm thì vẫn trả dc về bên ajax là
						một đối tượng ajax rỗng và kiểm tra dc length của đối tượng json trả về là 0 
- each(array, callback): Hàm callback sẽ được thực hiện lặp lại từ 0->length-1 lần và thực hiện xét duyệt các giá trị của array
- $(div.result ul li) --> lấy được phần tử li là con của ul, div.result
- toggleClass(): Thực hiện thêm or xóa đi class được truyền vào  --------- tonggle() thực hiện ẩn hiện phần tử
- pTitle, pLink: Cách đặt tên để phân biệt với title và link của các thuộc tính trong html
- attr(): Giúp lấy được các giá trị thuộc tính của phần tử html  ------------------- prop()
- Khi nhấn ra phía ngoài thì box kết quả tìm kiếm phải được ẩn đi, hoặc khi 1 item được chọn thì box result cũng phải được biến mất
	-----> blur(). Nhưng ở đây thì khi click vào 1 đối tượng nào đó thì ô input cũng bị mất focus---> cần dùng dến delay()
- slideUp(): Ẩn đi 1 đối tượng sử dụng hiệu ứng chuyển động sliding 
- results.delay(200).slideUp(300): Đợi sau 200ms thì mới thực hiện slideUp

====================================================== Multi Selectbox ======================================================

Sử lý vấn đề 3 SelectBox liên quan đến nhau:
	SelectBox thứ nhất: Chứa tên các thành phố ở Việt Nam
	SelectBox thứ 2: Chứa các quận huyện của các thành phố mà ta chọn
	SelectBox thứ 3: Các phường, các xã của các quận mà ta chọn
	Sau khi chọn 1 tỉnh bất kỳ ở SelectBox thứ nhất thì trong SelectBox thứ 2 sẽ hiển thị lên hàng loạt các quận huyện của tỉnh đó
		Sau khi nhấn chọn 1 quận bất kỳ ở SelectBox thứ 2 thì trong SelectBox thứ 3 sẽ xuất hiện các phường xã của quận đó
	Cấu trúc Database:
		Bảng cities:
			id: id của các thành phố
			name: Tên của các thành phố
			order: Sắp xếp vị trí của các thành phố
			status: Trạng thái là 1 thì hiển thị thành phố đó, là 0 thì không hiển thị
		Bảng districts:
			cityid: Quận huyện đó thuộc vào thành phố nào(khóa ngoại của bảng districts)
		Bảng ward:
			districtid: Là cột chứa khóa ngoại chứa id của quận mà phường xã này nằm trong đó
	Tạo giao diện cho index và kết nối với cơ sở dữ liệu
	Sau khi kết nối được với mysql thì chọn 1 database nằm trong mysql
	Để người ta không thể xem được cấu trúc thư mục files thì tạo thêm 1 file index.html trong thư mục files

Tạo ra tập tin để lấy ra được dữ liệu ở trong Database location(getdata.php), Đưa dữ liệu vào trong phần tử SelectBox đầu tiên
	Lấy dữ liệu ra và đổ vào trong các SelecBox thì có 2 cách đó là lấy theo kiểu thông thường, hoặc lấy theo kiểu Ajax
	mysqli_query($link, "set names 'utf8'") để có thế lấy ra được dữ liệu ở định dang utf8
	Để truyền được 1 mảng sang cho javascrip thì cần phải dùng json_encode() để chuyển mảng đó thành chuỗi json rồi đưa vào trong
		js rồi sau đó dùng ------------- để chuyển 1 chuỗi json từ PHP để chuyển thành 1 đối tượng trong js
	Lấy theo kiểu thông thường khôn gdungf đến ajax thì đoạn mã js phải nằm trong tập tin php mà không được tách riêng file js
	empty(): Phương thức này sẽ loại bỏ tất cả các phần tử con nằm trong selector đó

Xử lý cho phần Districts:
  Tạo ra 1 mảng dữ liệu có cấu trúc là:
    array(cityid=>array(id, name))
  Khi thay đổi giá trị ở Select Box city thì sẽ load lên giá trị ở phía trong Select Box District

Xử lý cho phần Ward:
  Khi SelecBox quận huyện thay đổi giá trị thì các giá trị mới sẽ được load vào trong SelecBox phường xã

Thực hiện bằng Ajax:
  Đưa phần xử lý js vào trong tập tin cities.js

====================================================== JS Error ======================================================

Xử dụng Throw, Try và Catch để xử lý các vấn đề gây ra lỗi trong lập trình js
Trong lập trình có những ngoại lệ mà chúng ta ít để ý tới:
  Phép chia 2 số a cho b, khi b bằng 0
  Đọc và ghi file nhưng file chưa được tạo hay không có
  Chưa điền dữ liệu vào text box nhưng vẫn đưa ra xử lý
Cú pháp: try - catch
  try {
    Run some code here
  } catch (err) {
    Handle errors here
  }
  Các câu lệnh nằm trong nhóm try sẽ đượ thực hiện, nếu mà nó có lỗi phát sinh thì nó sẽ nhảy sang nhóm catch
Throw: Với việc sử dụng Throw thì có thể tùy biến các thông báo lỗi
  Khi thực hiện các câu lệnh trong Try mà gặp lỗi thì dừng lại và throw ra câu thông báo lỗi

============================================================================================================
                                                    BOM
============================================================================================================
BOM: Browser Object Model
Cho phép Javascript thao tác với trình duyệt
Bao gồm các đối tượng: Window, Screen, Location, History, Navigator, PopupAlert, Timming, Cookies

================================================ JS Window =================================================
Javascript Window Object đại diện cho cửa sổ đang mở trên trình duyệt
Cung cấp các thuộc tính và các phương thức để thao tác các cửa sổ đang làm việc
Các đối tượng con của Javascript Window:
  document: Trả về đối tượng Document của cửa sổ
  history: Trả về đối tượng History của cửa sổ
  location: Trả về đối tượng Location của cửa sổ
  navigator: Trả về đối tượng Navigator của cửa sổ
  screen: Trả về đối tượng Screen của cửa sổ
Các hộp thoại:
  alert: Hiển thị hộp thoại thông báo và nút nhấn OK
    window.alert('This is a text') = alert('This is a text')
  confirm: Hiển thị hộp thoại thông báo xác nhận cùng nút nhấn OK và Cancel
    Nhấn OK trả về true
    Nhấn Cancel trả về false
  prompt: Hiển thị hộp thoại thông báo cho người dùng nhập vào 1 giá trị nào đó, kết quả trả về là giá trị đã nhập
- JavaScript Popup Boxes:
  Người dùng sẽ nhập tên của sinh viên vào rồi nhấn nút Add student
  Khi nhấn nút xong thì sinh viên vừa nhập sẽ được thêm vào phần danh sách, chỉ thực hiện thêm khi đã nhập dữ liệu vào ô input
  Nếu sinh viên không được nhập mà nhấn nút Add student thì sẽ hiển lên câu thông báo là "dữ liệu không được rỗng"
  Khi nhấn nút Add student thì sẽ kết hợp với việc dùng các hộp thoại như:
    alert: Thông báo khi người dùng không nhập dữ liệu
    confirm: Để xác nhận là người dùng có chắc chắn muốn Add student hay không
  Xử lý thêm tình huống là tên của sinh viên không phải thêm từ ô input nữa mà là được thêm từ hộp thoại nào đó

- Đóng, mở cửa sổ:
  open: Mở 1 cửa sổ mới
    window.open(URL, name, specs, replace)
      URL: Địa chỉ của trang muốn mở, nếu không truyền vào thì giá trị mặc định sẽ là about:blank
      name: Chế độ xuất hiện của cửa sổ mới(_blank, _parent, _self, _top) hoặc truyền vào name(thuộc tính name) nào đó
        _blank cũng chính là giá trị mặc định khi không truyền vào
      specs: Thiết lập các thuộc tính của cửa sổ mới muốn mở: width, height, top, left...
        scrollbars=no: Trên trình duyệt Chrome thì thanh scrollbar vẫn xuất hiện nhưng trên IE thì không
      replace: Tham số này ít khi sử dụng
        true: Thay thế tài liệu hiện tại trong lịch sử
        false: Không thay thế tài liệu hiện tại trong danh sách lịch sử mà nó sẽ tạo ra lịch sử mới
  close: Đóng cửa sổ đang mở lại
  closed: Thuộc tính dùng để kiểm tra cửa sổ đã được đóng hay chưa
- Kích thước cửa sổ, Mở cửa sổ đó nằm ở chính giữa trình duyệt
  innerHeight: Thiết lập hoặc trả về chiều cao phần chứa nội dung của một cửa sổ
  innerWidth: Thiết lập hoặc trả về chiều rộng của phần chứa nội dung của cửa sổ
  outerHeight: Thiết lập hoặc trả về chiều cao của cửa sổ(kể cả phần toolbar và scrollbars)
  outerWidth: Thiết lập hoặc trả về chiều rộng của cửa sổ(kể cả phần toolbar và scrollbars)
  Áp dụng các thuộc tính trên để khi mở 1 trình duyệt thì nó luôn nằm chính giữa trình duyệt
- Tọa độ của trình duyệt so với phần màn hình:
  screenLeft: Trả về tọa độ x của cửa sổ so với màn hình(Không hoạt động trên Firefox)
  screenTop: Trả về tọa độ y của cửa sổ so với màn hình(Không hoạt động trên Firefox)
  screenX: Trả về tọa độ x của cửa sổ so với màn hình(Firefox)
  screenY: Trả về tọa độ y của cửa sổ so với màn hình(Firefox)
  Biết cách lấy tọa độ của trình duyệt so với màn hình
  => Căn giữa phần cửa sổ, mặc dù phần trình duyệt có thu hẹp đến mức nào đi chăng nữa
  Khi định dạng theo top và left thì giá trị này được tính là so với màn hình chứ ko phài là so với trình duyệt
- JavaScript Timming: Có thể thiết lập thời gian để gọi 1 số đoạn code nào đó. Điều này còn được gọi là 'Timming events'
  setInterval(): Phương thức này giúp thực hiện 1 mã lệnh sau 1 khoảng thời gian quy định
    Tham số cần tryền vào là code và delay, ở đây code là 1 function thực hiện nhiệm vụ nào đó
  clearInterval(): Khi muốn hủy các hàm được gọi bởi setInterval
  setTimeout(): Thực hiện mã lệnh tại 1 time quy định(ví dụ như là sau khi người dùng vào trình duyệt 5s thì chúng ta sẽ  
    thực hiện 1 nhiệm vụ gì đó)
    Trong 1 số trường hợp có thể sử dụng setTimeout giống như là setInterval
    Muốn thực hiện setTimeout giống như setInterval thì phải dùng đệ quy
  clearTimeout(): Ngừng các mã lệnh được đã được gọi bởi setTimeout()
  Xây dựng chương trình đồng hồ điện tử
    Để hiển thị giá trị thời gian thì dùng đối tượng Date để hiển thị
  Ẩn hiển một bức tranh kết hợp setTimeout() và thuộc tính opacity của CSS
    Khi nhấn Hidden thì giảm dần giá trị opacity để cho nó giảm dần về 0
    Khi nhấn Show thì tăng dần giá trị của opacity từ 0 lên 1
  Xây dựng chương trình đồng hồ bấm giờ
    Ô input hiển thị thời gian
    Khi nhấn nút Start thì thời gian chạy
    Nhấn nút Pause thì dừng lại
    Nhấn nút Reset để quay về trạng thái ban đầu(00:00:00)
    Đồng hồ hiển thị các giá trị là phút:giây:mili giây
      1 phút = 60s
      1s = 100 ms;
    Lúc hiển thị thì kiểm tra xem các giá trị phút, giây, mili giây có mấy chữ số, nếu có 1 thì cho nó hiển thị ở dạng có
      2 chữ số